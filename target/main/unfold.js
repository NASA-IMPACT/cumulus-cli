"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncUnfold = void 0;
/**
 * Returns an async generator that yields values from the specified unfolding
 * function.
 *
 * The specified function is initially invoked with the specified seed value as
 * the sole argument.  As soon as the function returns a falsy value, the
 * generator stops generating values.  Otherwise, the specified function is
 * expected to return a pair of values (2-element array).  In this case, the
 * generator yields the first item in the pair, then invokes the specified
 * function again, passing the second element in the pair to the function.
 *
 * @example
 * const f = (x) => x >= 0 && [x, x - 2];
 * const ysFrom = asyncUnfold(f);
 *
 * for await (const y of ysFrom(10)) {
 *   console.log(y);
 * }
 *
 * //=> logs each of the values 10, 8, 6, 4, 2, 0
 *
 * @param f - unary unfolding function that (possibly asynchronously) generates one
 *    item at a time
 * @returns an async generator function that yields each item generated by the
 *    unfolding function
 */
function asyncUnfold(f) {
    return function makeAsyncGenerator(seed) {
        return __asyncGenerator(this, arguments, function* makeAsyncGenerator_1() {
            // eslint-disable-next-line functional/no-loop-statement
            for (
            // eslint-disable-next-line functional/no-let
            let input, output, result = yield __await(f(seed)); result && ({ output, input } = result); result = yield __await(f(input))) {
                yield yield __await(output);
            }
        });
    };
}
exports.asyncUnfold = asyncUnfold;
